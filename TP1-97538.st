TestCase subclass: #AlgoTekTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-97538-Test'!!AlgoTekTest methodsFor: 'tests' stamp: 'Fernando 10/21/2023 18:16'!test01ProbarElCostoDeUnaEntradaDeTipoCampoEnEfectivo	|artista_nacional algotek resultado_costo efectivo|	efectivo := Efectivo new.	artista_nacional := ArtistaNacional new.	artista_nacional establecerNombreArtista: 'Tan Bionica'.	artista_nacional establecerEventoArtista: 'La Ultima Noche Magica En River'.	artista_nacional establecerTarifaArtista: 50000.	algotek := AlgoTek new.	algotek ingresarArtista: artista_nacional.	algotek paraEvento: 'La Ultima Noche Magica En River' registrarUbicacionCampo: 'Campo General' tarifa: 16000.	resultado_costo := algotek costoEntradaPara: 'La Ultima Noche Magica En River' enUbicacion: 'Campo General' pagandoCon: efectivo.	self assert: resultado_costo equals: (50000 log + 16000).	! !!AlgoTekTest methodsFor: 'tests' stamp: 'Fernando 10/21/2023 18:56'!test03ProbarSacarLaEntradaMasBarataParaUnArtistaConEfectivo	|artista_nacional algotek resultado_costo efectivo resultado_esperado|	efectivo := Efectivo new.	artista_nacional := ArtistaNacional new.	artista_nacional establecerNombreArtista: 'Tan Bionica'.	artista_nacional establecerEventoArtista: 'La Ultima Noche Magica En River'.	artista_nacional establecerTarifaArtista: 50000.	algotek := AlgoTek new.	algotek ingresarArtista: artista_nacional.	algotek paraEvento: 'La Ultima Noche Magica En River' registrarUbicacionPlateaPreferencial: 'M912' tarifa: 25000.	algotek paraEvento: 'La Ultima Noche Magica En River' registrarUbicacionPlateaPreferencial: 'D018' tarifa: 2000.	algotek paraEvento: 'La Ultima Noche Magica En River' registrarUbicacionCampo: 'Campo General' tarifa: 16000.	algotek paraEvento: 'La Ultima Noche Magica En River' registrarUbicacionViP: 'Hospitality' tarifa: 40000 lugaresDisponibles: 2.	resultado_costo := algotek entradaMasBarataPara: 'La Ultima Noche Magica En River' pagandoCon: efectivo.	resultado_esperado := 50000 log.	resultado_esperado := resultado_esperado + 16000.	self assert: resultado_costo closeTo: resultado_esperado precision: 0.0001.	! !!AlgoTekTest methodsFor: 'tests' stamp: 'Fernando 10/21/2023 19:01'!test04ProbarSacarLaEntradaMasBarataParaUnArtistaConTarjeta	|artista_nacional algotek resultado_costo tarjeta resultado_esperado|	tarjeta := Tarjeta conNombre: 'Patagonia'.	artista_nacional := ArtistaNacional new.	artista_nacional establecerNombreArtista: 'Tan Bionica'.	artista_nacional establecerEventoArtista: 'La Ultima Noche Magica En River'.	artista_nacional establecerTarifaArtista: 50000.	algotek := AlgoTek new.	algotek ingresarArtista: artista_nacional.	algotek paraEvento: 'La Ultima Noche Magica En River' registrarUbicacionPlateaPreferencial: 'M912' tarifa: 25000.	algotek paraEvento: 'La Ultima Noche Magica En River' registrarUbicacionPlateaPreferencial: 'D018' tarifa: 2000.	algotek paraEvento: 'La Ultima Noche Magica En River' registrarUbicacionCampo: 'Campo General' tarifa: 16000.	algotek paraEvento: 'La Ultima Noche Magica En River' registrarUbicacionViP: 'Hospitality' tarifa: 40000 lugaresDisponibles: 2.	resultado_costo := algotek entradaMasBarataPara: 'La Ultima Noche Magica En River' pagandoCon: tarjeta.	resultado_esperado := 50000 log.	resultado_esperado := resultado_esperado + 16000.	resultado_esperado := resultado_esperado*0.8.	self assert: resultado_costo closeTo:  resultado_esperado precision: 0.0001.! !!AlgoTekTest methodsFor: 'tests' stamp: 'Fernando 10/21/2023 18:25'!test02ProbarElCostoDeUnaEntradaDeTipoCampoEnTarjeta	|artista_nacional algotek resultado_costo tarjeta|	tarjeta := Tarjeta conNombre: 'Patagonia'.	artista_nacional := ArtistaNacional new.	artista_nacional establecerNombreArtista: 'Tan Bionica'.	artista_nacional establecerEventoArtista: 'La Ultima Noche Magica En River'.	artista_nacional establecerTarifaArtista: 50000.	algotek := AlgoTek new.	algotek ingresarArtista: artista_nacional.	algotek paraEvento: 'La Ultima Noche Magica En River' registrarUbicacionCampo: 'Campo General' tarifa: 16000.	resultado_costo := algotek costoEntradaPara: 'La Ultima Noche Magica En River' enUbicacion: 'Campo General' pagandoCon: tarjeta.	self assert: resultado_costo closeTo: ((50000 log + 16000)*0.8) precision: 0.0001.	! !TestCase subclass: #ArtistaInternacionalTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-97538-Test'!!ArtistaInternacionalTest methodsFor: 'tests' stamp: 'Fernando 10/21/2023 16:28'!test01ObtenerElCostoDeUnArtistaInternacional	|artista_internacional|	artista_internacional := ArtistaInternacional new.	artista_internacional establecerNombreArtista: 'Taylor Swift'.	artista_internacional establecerEventoArtista: 'The Eras Tour, en River'.	artista_internacional establecerTarifaArtista: 100000.	self assert: artista_internacional costoArtista equals:  ((100000 * 2) / 5 + 1000).! !TestCase subclass: #ArtistaNacionalTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-97538-Test'!!ArtistaNacionalTest methodsFor: 'tests' stamp: 'Fernando 10/21/2023 15:48'!test01ObtenerElCostoDeUnArtista	|artista_nacional|	artista_nacional := ArtistaNacional new.	artista_nacional establecerNombreArtista: 'Tan Bionica'.	artista_nacional establecerEventoArtista: 'La Ultima Noche Magica en River'.	artista_nacional establecerTarifaArtista: 50000.	self assert: (artista_nacional costoArtista) equals: 50000 log.! !!ArtistaNacionalTest methodsFor: 'tests' stamp: 'Fernando 10/21/2023 21:35'!test03PruebaIngresaTarifaDelArtistaEnNegativo	|artista_nacional|	artista_nacional := ArtistaNacional new.	self should: [artista_nacional establecerTarifaArtista: -1] raise: ArtistaIngresaSuTarifaEnNegativoError.! !!ArtistaNacionalTest methodsFor: 'tests' stamp: 'Fernando 10/21/2023 21:33'!test02PruebaArtistaIngresaNombreEnVacio	|artista_nacional|	artista_nacional := ArtistaNacional new.	self should: [artista_nacional establecerNombreArtista: ' '] raise: ArtistaIngresaNombreEnVacioError.! !TestCase subclass: #CampoTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-97538-Test'!!CampoTest methodsFor: 'tests' stamp: 'Fernando 10/21/2023 04:33'!test01CalcularElCostoDeUnaUbicacionDelCampo	|campo|	campo := Campo new.	campo ingresarNombreEvento: 'La Ultima Noche Magica en River'.	campo ingresarNombreUbicacion: 'Campo General'.	campo ingresarTarifaUbicacion: 16000.	self assert: (campo calcularCosto) equals: 16000.! !TestCase subclass: #EfectivoTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-97538-Test'!!EfectivoTest methodsFor: 'tests' stamp: 'Fernando 10/21/2023 21:28'!test02EfectivoLanzaErrorPorImporteNegativo	|efectivo|	efectivo := Efectivo new.	self should: [efectivo aplicarDescuentoAImporte: -100] raise: EfectivoIngresaElImporteEnValorNegativoError.! !!EfectivoTest methodsFor: 'tests' stamp: 'Fernando 10/21/2023 04:44'!test01AplicandoDescuentoAUnPagoEnEfectivo	|objeto_efectivo|	objeto_efectivo := Efectivo new.	self assert: (objeto_efectivo aplicarDescuentoAImporte: 2000) equals: 2000.! !TestCase subclass: #PlateaPreferencialTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-97538-Test'!!PlateaPreferencialTest methodsFor: 'tests' stamp: 'Fernando 10/21/2023 04:15'!test01CalcularElCostoDeUnaUbicacionDePlateaPreferencial	|platea_preferencial ubicacion_elegida|	platea_preferencial := PlateaPreferencial new.	ubicacion_elegida := 'D018'.	platea_preferencial ingresarNombreEvento: 'La Ultima Noche Magica en River'.	platea_preferencial ingresarNombreUbicacion: ubicacion_elegida.	platea_preferencial ingresarTarifaUbicacion: 2000.	self assert: (platea_preferencial calcularCosto) equals: 18*2000.! !TestCase subclass: #TarjetaTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-97538-Test'!!TarjetaTest methodsFor: 'tests' stamp: 'Fernando 10/21/2023 13:20'!test03PruebaParaElCalculoDelDescuento	|tarjeta resultado_esperado|	tarjeta := Tarjeta new.	resultado_esperado := (341000*20)/100.	self assert: (tarjeta calcularDescuento: 341000) equals: resultado_esperado.! !!TarjetaTest methodsFor: 'tests' stamp: 'Fernando 10/21/2023 12:44'!test02ProbarIngresarElNombreDeLaTarjeta	|tarjeta|	tarjeta := Tarjeta new.	tarjeta ingresarNombreTarjeta: 'Patagonia'.	self assert: tarjeta obtenerNombreTarjeta equals: 'Patagonia'.! !!TarjetaTest methodsFor: 'tests' stamp: 'Fernando 10/21/2023 21:19'!test05TarjetaLanzaErrorPorNombreVacio	|tarjeta|	tarjeta := Tarjeta new.	self should: [tarjeta ingresarNombreTarjeta: ' '] raise: TarjetaIngresaSuNombreEnVacioError.! !!TarjetaTest methodsFor: 'tests' stamp: 'Fernando 10/21/2023 12:37'!test01IngresarNombreDeLaTarjetaConNombre	|tarjeta|	tarjeta := Tarjeta conNombre: 'Patagonia'.	self assert: (tarjeta isKindOf: Tarjeta).	self assert: tarjeta obtenerNombreTarjeta equals: 'Patagonia'! !!TarjetaTest methodsFor: 'tests' stamp: 'Fernando 10/21/2023 13:51'!test04PruebaParaElImporteConElDescuentoYaAplicado	|tarjeta resultado_esperado|	tarjeta := Tarjeta new.	resultado_esperado := 341000 - (tarjeta calcularDescuento: 341000).	self assert: (tarjeta aplicarDescuentoAImporte: 341000) equals: resultado_esperado.! !!TarjetaTest methodsFor: 'tests' stamp: 'Fernando 10/21/2023 21:23'!test06TarjetaLanzaErrorPorImporteNegativo	|tarjeta|	tarjeta := Tarjeta new.	self should: [tarjeta aplicarDescuentoAImporte: -100] raise: TarjetaIngresaUnImporteNegativoError.! !TestCase subclass: #VipTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-97538-Test'!!VipTest methodsFor: 'tests' stamp: 'Fernando 10/21/2023 02:58'!test01IngresaLaCantidadDeLugaresDisponibles	|vip|	vip := Vip new.	vip ingresarCantidadLugaresDisponibles: 2.	self assert: (vip getCantidadLugaresDisponibles) equals: 2. ! !!VipTest methodsFor: 'tests' stamp: 'Fernando 10/21/2023 21:09'!test04LanzaErrorPorCantidadNegativaIngresadaEnLaTarifa	|vip|	vip := Vip new.	self should: [vip ingresarTarifaUbicacion: -40000] raise: UbicacionIngresaTarifaUbicacionUnNumeroNegativoError.! !!VipTest methodsFor: 'tests' stamp: 'Fernando 10/21/2023 21:16'!test05LanzaErrorPorNombreVacio	|vip|	vip := Vip new.	self should: [vip ingresarNombreEvento: ' '] raise: UbicacionIngresaNombreVacioError.! !!VipTest methodsFor: 'tests' stamp: 'Fernando 10/21/2023 04:21'!test02CalcularElCostoDeUnaUbicacionVip 	|vip|	vip := Vip new.	vip ingresarNombreEvento: 'La Ultima Noche Magica en River'.	vip ingresarNombreUbicacion: 'Hospitality'.	vip ingresarTarifaUbicacion: 40000.	vip ingresarCantidadLugaresDisponibles: 2.	self assert: vip calcularCosto equals: (40000/ 2).	! !!VipTest methodsFor: 'tests' stamp: 'Fernando 10/21/2023 21:04'!test03LanzaErrorPorCantidadNegativaIngresadaDeLugares	|vip|	vip := Vip new.	self should: [vip ingresarCantidadLugaresDisponibles: -1] raise: VipIngresaCantidadNegativaDeLugaresDisponiblesError.	! !Object subclass: #AlgoTek	instanceVariableNames: 'lista_artistas lista_ubicaciones'	classVariableNames: ''	package: 'TP1-97538'!!AlgoTek methodsFor: 'as yet unclassified' stamp: 'Fernando 10/14/2023 01:02'!paraEvento: nombre_evento_ingresado registrarUbicacionPlateaPreferencial: nombre_ubicacion_ingresada tarifa: tarifa_ingresada	|objeto_platea|	objeto_platea := PlateaPreferencial new.	objeto_platea ingresarNombreEvento: nombre_evento_ingresado.	objeto_platea ingresarNombreUbicacion: nombre_ubicacion_ingresada.	objeto_platea ingresarTarifaUbicacion: tarifa_ingresada.	lista_ubicaciones add: objeto_platea.! !!AlgoTek methodsFor: 'as yet unclassified' stamp: 'Fernando 10/20/2023 22:45'!costoEntradaPara: nombre_evento_ingresado enUbicacion: nombre_ubicacion_ingresada pagandoCon: pago_ingresado	|objeto_artista objeto_ubicacion costo_artista costo_ubicacion resultado |	objeto_artista := lista_artistas detect: [ :artista | artista getEventoArtista = nombre_evento_ingresado ].	"Aclaracion: Asumo que no va dar nil"	costo_artista := objeto_artista costoArtista.	objeto_ubicacion := lista_ubicaciones detect: [ :ubicacion | ubicacion obtenerNombreUbicacion = nombre_ubicacion_ingresada  ].	costo_ubicacion := objeto_ubicacion calcularCosto.	resultado := costo_artista + costo_ubicacion.	resultado := pago_ingresado aplicarDescuentoAImporte: resultado.	^resultado 	! !!AlgoTek methodsFor: 'as yet unclassified' stamp: 'Fernando 10/10/2023 03:55'!ingresarArtista: artista_ingresado	lista_artistas add: artista_ingresado.! !!AlgoTek methodsFor: 'as yet unclassified' stamp: 'Fernando 10/14/2023 01:10'!paraEvento: nombre_evento_ingresado registrarUbicacionViP: nombre_ubicacion_ingresada tarifa: tarifa_ingresada lugaresDisponibles: cantidad_ingresados	|objeto_vip|	objeto_vip := Vip new.	objeto_vip ingresarNombreEvento: nombre_evento_ingresado.	objeto_vip ingresarNombreUbicacion: nombre_ubicacion_ingresada.	objeto_vip ingresarTarifaUbicacion: tarifa_ingresada.	objeto_vip ingresarCantidadLugaresDisponibles: cantidad_ingresados.	lista_ubicaciones add: objeto_vip.! !!AlgoTek methodsFor: 'as yet unclassified' stamp: 'Fernando 10/14/2023 01:07'!paraEvento: nombre_ingresado registrarUbicacionCampo: nombre_ubicacion_ingresada tarifa: tarifa_ingresada	|objeto_campo|	objeto_campo := Campo new.	objeto_campo ingresarNombreEvento: nombre_ingresado.	objeto_campo ingresarNombreUbicacion: nombre_ubicacion_ingresada.	objeto_campo ingresarTarifaUbicacion: tarifa_ingresada.	lista_ubicaciones add: objeto_campo.! !!AlgoTek methodsFor: 'as yet unclassified' stamp: 'Fernando 10/20/2023 22:33'!entradaMasBarataPara: nombre_evento_ingresado pagandoCon: pago_ingresado	|resultado resultado_ubicacion objeto_artista costo_artista| 	objeto_artista := lista_artistas detect: [ :artista | artista getEventoArtista = nombre_evento_ingresado ] ifNone: [ nil ].	resultado_ubicacion := (lista_ubicaciones at: 1) calcularCosto.	lista_ubicaciones do: [ :ubicacion | (ubicacion calcularCosto < resultado_ubicacion) ifTrue: [resultado_ubicacion := ubicacion calcularCosto ]].	"Me pide que use min pero ya lo use y NO ME FUNCIONO!!!!!!!!!!"	costo_artista := objeto_artista costoArtista.	resultado := costo_artista + resultado_ubicacion.	"Cero porque para efectivo no hay descuento"	resultado := pago_ingresado aplicarDescuentoAImporte: resultado.	^resultado	! !!AlgoTek methodsFor: 'initialization' stamp: 'Fernando 10/18/2023 19:43'!initialize 	lista_artistas := OrderedCollection new.	lista_ubicaciones := OrderedCollection new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AlgoTek class	instanceVariableNames: ''!!AlgoTek class methodsFor: 'as yet unclassified' stamp: 'Fernando 10/20/2023 13:29'!registrarEvento: nombre_evento deArtistaInternacional: nombre_artista_ingresado conTarifaArtista: tarifa_ingresada	|objeto_artista_internacional  objeto_algotek|	objeto_artista_internacional := ArtistaInternacional new.	objeto_artista_internacional establecerNombreArtista: nombre_artista_ingresado.	objeto_artista_internacional establecerTarifaArtista: tarifa_ingresada.	objeto_artista_internacional establecerEventoArtista: nombre_evento.	objeto_algotek := AlgoTek new.	objeto_algotek ingresarArtista: objeto_artista_internacional.	^objeto_algotek ! !!AlgoTek class methodsFor: 'as yet unclassified' stamp: 'Fernando 10/18/2023 19:55'!registrarEvento: nombre_evento deArtistaNacional: nombre_artista_nacional_ingresado conTarifaArtista: tarifa_ingresada	|objeto_artista_nacional objeto_algotek|	objeto_artista_nacional := ArtistaNacional new.	objeto_artista_nacional establecerNombreArtista: nombre_artista_nacional_ingresado.	objeto_artista_nacional establecerTarifaArtista: tarifa_ingresada.	objeto_artista_nacional establecerEventoArtista: nombre_evento.	objeto_algotek := AlgoTek new.	objeto_algotek ingresarArtista: objeto_artista_nacional.	^objeto_algotek ! !Object subclass: #Artista	instanceVariableNames: 'nombre_artista tarifa_artista evento_artista'	classVariableNames: ''	package: 'TP1-97538'!!Artista methodsFor: 'as yet unclassified' stamp: 'Fernando 10/16/2023 21:59'!getEventoArtista	^evento_artista 	! !!Artista methodsFor: 'as yet unclassified' stamp: 'Fernando 10/16/2023 22:15'!getTarifaArtista	^tarifa_artista ! !!Artista methodsFor: 'as yet unclassified' stamp: 'Fernando 10/21/2023 20:49'!establecerTarifaArtista: tarifa_ingresada	(tarifa_ingresada < 0) ifTrue: [ ArtistaIngresaSuTarifaEnNegativoError signal ].	tarifa_artista := tarifa_ingresada.! !!Artista methodsFor: 'as yet unclassified' stamp: 'Fernando 10/21/2023 21:30'!establecerEventoArtista: nombre_evento_ingresado	(nombre_evento_ingresado = ' ') ifTrue: [ ArtistaIngresaNombreEnVacioError signal ].	evento_artista := nombre_evento_ingresado.! !!Artista methodsFor: 'as yet unclassified' stamp: 'Fernando 10/21/2023 21:30'!establecerNombreArtista: nombre_ingresado	(nombre_ingresado = ' ') ifTrue: [ ArtistaIngresaNombreEnVacioError signal ].	nombre_artista := nombre_ingresado.! !!Artista methodsFor: 'as yet unclassified' stamp: 'Fernando 10/16/2023 22:20'!costoArtista	"Corresponde que el calculo del costo lo hagan las clases hijas de la clase Artista? De alguna manera, hay que justificar la creacion de las clases hijas"	self subclassResponsibility ! !!Artista methodsFor: 'as yet unclassified' stamp: 'Fernando 10/16/2023 21:59'!getNombreArtista 	^nombre_artista ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Artista class	instanceVariableNames: ''!!Artista class methodsFor: 'as yet unclassified' stamp: 'Fernando 10/14/2023 19:50'!ingresarNombre: nombre_ingresado eIngresarTarifa: tarifa_ingresada eIngresarEvento: nombre_evento_ingresado	|objeto_artista|	objeto_artista := Artista new.	objeto_artista establecerNombreArtista: nombre_ingresado.	objeto_artista establecerTarifaArtista: tarifa_ingresada.	objeto_artista establecerEventoArtista: nombre_evento_ingresado.! !Error subclass: #ArtistaIngresaNombreEnVacioError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-97538'!Error subclass: #ArtistaIngresaSuTarifaEnNegativoError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-97538'!Artista subclass: #ArtistaInternacional	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-97538'!!ArtistaInternacional methodsFor: 'as yet unclassified' stamp: 'Fernando 10/16/2023 22:50'!costoArtista 	|resultado auxiliar_tarifa|	auxiliar_tarifa := self getTarifaArtista.	resultado := (auxiliar_tarifa * 2) / 5 + 1000.	^resultado  ! !Artista subclass: #ArtistaNacional	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-97538'!!ArtistaNacional methodsFor: 'as yet unclassified' stamp: 'Fernando 10/16/2023 22:52'!costoArtista 	^ (self getTarifaArtista) log! !Error subclass: #EfectivoIngresaElImporteEnValorNegativoError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-97538'!Error subclass: #TarjetaIngresaSuNombreEnVacioError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-97538'!Error subclass: #TarjetaIngresaUnImporteNegativoError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-97538'!Object subclass: #TipoDePago	instanceVariableNames: 'descuento'	classVariableNames: ''	package: 'TP1-97538'!!TipoDePago methodsFor: 'as yet unclassified' stamp: 'Fernando 10/20/2023 22:02'!aplicarDescuentoAImporte: importe_ingresado	self subclassResponsibility ! !TipoDePago subclass: #Efectivo	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-97538'!!Efectivo methodsFor: 'as yet unclassified' stamp: 'Fernando 10/21/2023 20:35'!aplicarDescuentoAImporte: importe_ingresado	"Para pagos en efectivo, no hay descuento"	(importe_ingresado < 0) ifTrue: [ EfectivoIngresaElImporteEnValorNegativoError signal].	^importe_ingresado ! !TipoDePago subclass: #Tarjeta	instanceVariableNames: 'nombre_tarjeta'	classVariableNames: ''	package: 'TP1-97538'!!Tarjeta methodsFor: 'as yet unclassified' stamp: 'Fernando 10/20/2023 22:16'!calcularDescuento: importe_ingresado	|resultado_descuento|	resultado_descuento := (20*importe_ingresado)/100.	^resultado_descuento.! !!Tarjeta methodsFor: 'as yet unclassified' stamp: 'Fernando 10/21/2023 12:35'!obtenerNombreTarjeta	^nombre_tarjeta ! !!Tarjeta methodsFor: 'as yet unclassified' stamp: 'Fernando 10/21/2023 20:40'!ingresarNombreTarjeta: nombre_ingresado	(nombre_ingresado = ' ') ifTrue: [ TarjetaIngresaSuNombreEnVacioError signal ].	nombre_tarjeta := nombre_ingresado ! !!Tarjeta methodsFor: 'as yet unclassified' stamp: 'Fernando 10/21/2023 20:38'!aplicarDescuentoAImporte: importe_ingresado	"Para pagos en tarjeta, hay un 20% de descuento"	|resultado_descuento auxiliar_importe|	(importe_ingresado < 0) ifTrue: [ TarjetaIngresaUnImporteNegativoError signal ].	resultado_descuento := self calcularDescuento: importe_ingresado.	auxiliar_importe := importe_ingresado - resultado_descuento.	^auxiliar_importe! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Tarjeta class	instanceVariableNames: ''!!Tarjeta class methodsFor: 'as yet unclassified' stamp: 'Fernando 10/21/2023 00:41'!conNombre: nombre_ingresado	|objeto_tarjeta|	objeto_tarjeta := Tarjeta new.	objeto_tarjeta ingresarNombreTarjeta: nombre_ingresado.	^objeto_tarjeta	! !Object subclass: #Ubicacion	instanceVariableNames: 'nombre_ubicacion tarifa_ubicacion nombre_evento'	classVariableNames: ''	package: 'TP1-97538'!!Ubicacion methodsFor: 'as yet unclassified' stamp: 'Fernando 10/14/2023 00:41'!obtenerNombreEvento	^nombre_evento ! !!Ubicacion methodsFor: 'as yet unclassified' stamp: 'Fernando 10/21/2023 21:15'!ingresarNombreEvento: nombre_ingresado	(nombre_ingresado = ' ') ifTrue: [ UbicacionIngresaNombreVacioError signal ].	nombre_evento := nombre_ingresado.! !!Ubicacion methodsFor: 'as yet unclassified' stamp: 'Fernando 10/21/2023 21:15'!ingresarNombreUbicacion: nombre_ubicacion_ingresada	(nombre_ubicacion_ingresada = ' ') ifTrue: [ UbicacionIngresaNombreVacioError signal ].	nombre_ubicacion := nombre_ubicacion_ingresada. 	! !!Ubicacion methodsFor: 'as yet unclassified' stamp: 'Fernando 10/13/2023 19:48'!calcularCosto	self subclassResponsibility.! !!Ubicacion methodsFor: 'as yet unclassified' stamp: 'Fernando 10/13/2023 20:39'!obtenerNombreUbicacion	^nombre_ubicacion ! !!Ubicacion methodsFor: 'as yet unclassified' stamp: 'Fernando 10/14/2023 00:03'!obtenerTarifaUbicacion	^tarifa_ubicacion ! !!Ubicacion methodsFor: 'as yet unclassified' stamp: 'Fernando 10/21/2023 20:29'!ingresarTarifaUbicacion: tarifa_ingresada	(tarifa_ingresada < 0) ifTrue: [ UbicacionIngresaTarifaUbicacionUnNumeroNegativoError signal ].	tarifa_ubicacion := tarifa_ingresada.	! !Ubicacion subclass: #Campo	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-97538'!!Campo methodsFor: 'as yet unclassified' stamp: 'Fernando 10/14/2023 00:20'!calcularCosto 	^ self obtenerTarifaUbicacion  ! !Ubicacion subclass: #PlateaPreferencial	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-97538'!!PlateaPreferencial methodsFor: 'as yet unclassified' stamp: 'Fernando 10/18/2023 04:03'!calcularCosto 	|ultimos_numeros auxiliar_nombre_ubicacion numeros|	auxiliar_nombre_ubicacion := self obtenerNombreUbicacion.	"Obtengo los dos ultimos caracteres de la cadena"	ultimos_numeros := auxiliar_nombre_ubicacion copyFrom: auxiliar_nombre_ubicacion size - 1 to: auxiliar_nombre_ubicacion size.	numeros := ultimos_numeros asInteger.	^ numeros*(self obtenerTarifaUbicacion) ! !Error subclass: #UbicacionIngresaNombreVacioError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-97538'!Error subclass: #UbicacionIngresaTarifaUbicacionUnNumeroNegativoError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-97538'!Ubicacion subclass: #Vip	instanceVariableNames: 'cantidad_lugares_disponibles'	classVariableNames: ''	package: 'TP1-97538'!!Vip methodsFor: 'as yet unclassified' stamp: 'Fernando 10/21/2023 20:22'!ingresarCantidadLugaresDisponibles: cantidad_ingresada	(cantidad_ingresada < 0) ifTrue: [  VipIngresaCantidadNegativaDeLugaresDisponiblesError signal].	cantidad_lugares_disponibles := cantidad_ingresada.! !!Vip methodsFor: 'as yet unclassified' stamp: 'Fernando 10/12/2023 20:43'!getCantidadLugaresDisponibles	^cantidad_lugares_disponibles ! !!Vip methodsFor: 'as yet unclassified' stamp: 'Fernando 10/21/2023 03:47'!calcularCosto 	|auxiliar_vip resultado|	auxiliar_vip := self obtenerTarifaUbicacion.	resultado := auxiliar_vip/cantidad_lugares_disponibles.	cantidad_lugares_disponibles := cantidad_lugares_disponibles - 1.	^resultado! !Error subclass: #VipIngresaCantidadNegativaDeLugaresDisponiblesError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-97538'!